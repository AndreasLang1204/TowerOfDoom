#pragma once

#include "../Game/ReferenceType.h"

namespace ToD
{
	namespace Calc
	{
		////////////////////////////////////////////////////////////
		/// \brief A calculatable value.
		///
		////////////////////////////////////////////////////////////
		class Value :
			public ReferenceType
		{
			/// Typedefs
		public:
			////////////////////////////////////////////////////////////
			/// \brief Type definition of the value unit type.
			///
			////////////////////////////////////////////////////////////
			typedef int 													Unit;

			/// Constructors, destructors
		public:
			////////////////////////////////////////////////////////////
			/// \brief The constructor (default constructor).
			///
			/// \param l_value The initial value to set.
			///
			////////////////////////////////////////////////////////////
			explicit Value(const Unit l_value = Unit(0));

			////////////////////////////////////////////////////////////
			/// \brief The destructor.
			///
			////////////////////////////////////////////////////////////
			virtual ~Value() IsDefault__;

			/// Properties
		public:
			////////////////////////////////////////////////////////////
			/// \brief Gets the static runtime type.
			///
			/// \return The static runtime type.
			///
			////////////////////////////////////////////////////////////
			virtual RuntimeType GetRuntimeType() const override;

			////////////////////////////////////////////////////////////
			/// \brief Gets the value.
			///
			/// \return The value.
			///
			////////////////////////////////////////////////////////////
			Unit GetValue() const;

		protected:
			////////////////////////////////////////////////////////////
			/// \brief Sets the evaluated value.
			///
			/// \param l_value The value to set.
			///
			////////////////////////////////////////////////////////////
			void SetValue(const Unit l_value);

			/// Methods
		public:
			////////////////////////////////////////////////////////////
			/// \brief Evaluates the value.
			///
			////////////////////////////////////////////////////////////
			virtual void Evaluate();

			/// Members
		private:
			Unit															m_value; ///< The evaluated value.
		};
	}
}
