#pragma once

#include "stdafx.h"

namespace ToD
{
	////////////////////////////////////////////////////////////
	/// \brief Provides functionalty to iterate over the object.
	///
	////////////////////////////////////////////////////////////
	template<typename TIterator>
	class IEnumerable
	{
		/// Typedefs
	public:
		////////////////////////////////////////////////////////////
		/// \brief The iterator type definition for the enumerable.
		///
		////////////////////////////////////////////////////////////
		typedef typename TIterator::iterator								Iterator;
		
		/// Constructors, destructors
	protected:
		////////////////////////////////////////////////////////////
		/// \brief The constructor (default constructor).
		///
		////////////////////////////////////////////////////////////
		IEnumerable() IsDefault__;

	public:
		////////////////////////////////////////////////////////////
		/// \brief The destructor.
		///
		////////////////////////////////////////////////////////////
		virtual ~IEnumerable() IsDefault__;

		/// Methods
	public:
		////////////////////////////////////////////////////////////
		/// \brief Retrieves the iterator where the sequence begins.
		///
		/// \return An iterator of the specified type.
		///
		////////////////////////////////////////////////////////////
		virtual Iterator begin() IsAbstract__;

		////////////////////////////////////////////////////////////
		/// \brief Retrieves the iterator where the sequence ends.
		///
		/// \return An iterator of the specified type.
		///
		////////////////////////////////////////////////////////////
		virtual Iterator end() IsAbstract__;
	};
}