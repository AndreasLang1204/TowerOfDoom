#pragma once

#include "ReferenceType.h"
#include "GameObject.h"

#include "../Managers/ObjectContainer.h"

namespace ToD
{
	namespace Events
	{
		class SfmlEventEventArgs;
	}
}

using namespace sf;
using namespace ToD::Events;
using namespace ToD::Managers;

namespace ToD
{
	////////////////////////////////////////////////////////////
	/// \brief Updates and renders a game.
	///
	////////////////////////////////////////////////////////////
	class Game :
		public ReferenceType
	{
		/// Nested classes & structs
	public:
		////////////////////////////////////////////////////////////
		/// \brief Used to share a game.
		///
		////////////////////////////////////////////////////////////
		class Shared :
			public ObjectContainer::SharedObject
		{
			/// Constructors, desctructors
		public:
			////////////////////////////////////////////////////////////
			/// \brief The constructor.
			///
			/// \param l_game The game to share.
			///
			////////////////////////////////////////////////////////////
			explicit Shared(Game* l_game);

			////////////////////////////////////////////////////////////
			/// \brief The destructor.
			///
			////////////////////////////////////////////////////////////
			~Shared() IsDefault__;

			/// Properties
		public:
			////////////////////////////////////////////////////////////
			/// \brief Gets the static runtime type.
			///
			/// \return The static runtime type.
			///
			////////////////////////////////////////////////////////////
			virtual RuntimeType GetRuntimeType() const override;

			////////////////////////////////////////////////////////////
			/// \brief Gets the static runtime type.
			///
			/// \return The static runtime type.
			///
			////////////////////////////////////////////////////////////
			static RuntimeType RuntimeType();

			/// Operators
		public:
			////////////////////////////////////////////////////////////
			/// \brief Gets the pointer to the shared game instance.
			///
			/// \return The pointer to the shared game instance.
			///
			////////////////////////////////////////////////////////////
			Game* operator->() const;

			/// Members
		private:
			Game*															m_game; ///< The game to share.
		};

		/// Constructors, desctructors
	public:
		////////////////////////////////////////////////////////////
		/// \brief The constructor (default constructor).
		///
		////////////////////////////////////////////////////////////
		Game();

		////////////////////////////////////////////////////////////
		/// \brief The destructor.
		///
		////////////////////////////////////////////////////////////
		~Game() IsDefault__;

		/// Properties
	public:
		////////////////////////////////////////////////////////////
		/// \brief Gets the static runtime type.
		///
		/// \return The static runtime type.
		///
		////////////////////////////////////////////////////////////
		virtual RuntimeType GetRuntimeType() const override;

		////////////////////////////////////////////////////////////
		/// \brief Gets the static runtime type.
		///
		/// \return The static runtime type.
		///
		////////////////////////////////////////////////////////////
		static RuntimeType RuntimeType();

		////////////////////////////////////////////////////////////
		/// \brief Gets the used render target.
		///
		/// \return The currently used render target.
		///
		////////////////////////////////////////////////////////////
		RenderWindow& GetRenderWindow();

		/// Methods
	public:
		////////////////////////////////////////////////////////////
		/// \brief Starts the game.
		///
		/// \exception std::exception when another game already is running.
		///
		////////////////////////////////////////////////////////////
		void Run();

		////////////////////////////////////////////////////////////
		/// \brief Closes the game window and shuts down the game properly.
		///
		////////////////////////////////////////////////////////////
		void Exit();

		////////////////////////////////////////////////////////////
		/// \brief Sets the default view as current view.
		/// 
		////////////////////////////////////////////////////////////
		void UseDefaultView();

	private:
		////////////////////////////////////////////////////////////
		/// \brief Initializes all modules used by the game.
		///
		/// \return True if the initialization succeeded; otherwise false.
		///
		////////////////////////////////////////////////////////////
		bool Init();

		////////////////////////////////////////////////////////////
		/// \brief Updates the game and necessary modules.
		///
		////////////////////////////////////////////////////////////
		void Update();

		////////////////////////////////////////////////////////////
		/// \brief Renders the game to the render window.
		///
		////////////////////////////////////////////////////////////
		void Render();

		////////////////////////////////////////////////////////////
		/// \brief Releases loaded resources and unloads used modules.
		///
		////////////////////////////////////////////////////////////
		void ShutDown();

		////////////////////////////////////////////////////////////
		/// \brief Handles the SFML event raised event.
		///
		/// \param l_args Event arguments.
		///
		////////////////////////////////////////////////////////////
		void OnSfmlEventRaised(SfmlEventEventArgs* l_args);

		/// Members
	private:
		static Clock														s_clock; ///< Used for time calculations in update()
		RenderWindow														m_window; ///< Displays the game
		GameObject															m_gameObject; ///< Holds shared components.
	};

}
