#pragma once

#include "ReferenceType.h"
#include "KeyBindingName.h"
#include "KeyBindingState.h"

using namespace std;

namespace ToD
{
	////////////////////////////////////////////////////////////
	/// \brief Defines how a key binding is created and updated.
	///
	////////////////////////////////////////////////////////////
	class KeyBinding :
		public ReferenceType
	{
		/// Constructors, destructors
	public:
		////////////////////////////////////////////////////////////
		/// \brief The constructor.
		///
		/// \param l_name The binding name.
		///
		////////////////////////////////////////////////////////////
		explicit KeyBinding(KeyBindingName::EntryPtr l_name);

		////////////////////////////////////////////////////////////
		/// \brief The destructor.
		///
		////////////////////////////////////////////////////////////
		~KeyBinding() IsDefault__;

		/// Properties
	public:
		////////////////////////////////////////////////////////////
		/// \brief Gets the static runtime type.
		///
		/// \return The static runtime type.
		///
		////////////////////////////////////////////////////////////
		virtual RuntimeType GetRuntimeType() const override;

		////////////////////////////////////////////////////////////
		/// \brief Gets the binding name.
		///
		/// \return The binding name.
		///
		////////////////////////////////////////////////////////////
		KeyBindingName::EntryPtr GetName() const;

		////////////////////////////////////////////////////////////
		/// \brief Gets the binding state.
		///
		/// \return The binding state.
		///
		////////////////////////////////////////////////////////////
		KeyBindingState::EntryPtr GetKeyState() const;

		/// Methods
	public:
		////////////////////////////////////////////////////////////
		/// \brief Updates the binding state.
		///
		////////////////////////////////////////////////////////////
		void GotPressed();

		////////////////////////////////////////////////////////////
		/// \brief Updates the binding state.
		///
		////////////////////////////////////////////////////////////
		void GotReleased();

		/// Members
	private:
		KeyBindingState::EntryPtr											m_keyState; ///< The current key state of the binding.
		KeyBindingName::EntryPtr											m_name; ///< The binding name.
	};

}