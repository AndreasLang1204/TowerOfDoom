#pragma once

#include "GameObject.h"
#include "../Managers/ObjectContainer.h"

using namespace ToD::Managers;

namespace ToD
{
	////////////////////////////////////////////////////////////
	/// \brief Manages game component registration and de-registration.
	///
	////////////////////////////////////////////////////////////
	class GameComponentRegistration :
		public ObjectContainer::SharedObject
	{
		/// Constructors, destructors
	public:
		////////////////////////////////////////////////////////////
		/// \brief The constructor (default constructor).
		///
		////////////////////////////////////////////////////////////
		GameComponentRegistration() IsDefault__;

		////////////////////////////////////////////////////////////
		/// \brief The destructor.
		///
		////////////////////////////////////////////////////////////
		~GameComponentRegistration() IsDefault__;

		/// Properties
	public:
		////////////////////////////////////////////////////////////
		/// \brief Gets the static runtime type.
		///
		/// \return The static runtime type.
		///
		////////////////////////////////////////////////////////////
		virtual RuntimeType GetRuntimeType() const override;

		////////////////////////////////////////////////////////////
		/// \brief Gets the static runtime type.
		///
		/// \return The static runtime type.
		///
		////////////////////////////////////////////////////////////
		static RuntimeType RuntimeType();

		/// Methods
	public:
		////////////////////////////////////////////////////////////
		/// \brief Registers all components of one or more game objects.
		///
		/// \param l_objects The objects to register.
		///
		////////////////////////////////////////////////////////////
		void Register(const GameObject::Array l_objects) const;

		////////////////////////////////////////////////////////////
		/// \brief De-registers all components of one or more game objects.
		///
		/// \param l_objects The objects to de-register.
		///
		////////////////////////////////////////////////////////////
		void Deregister(const GameObject::Array l_objects) const;
	};
}
