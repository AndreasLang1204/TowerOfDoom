#pragma once

#include "ReferenceType.h"

namespace ToD
{
	////////////////////////////////////////////////////////////
	/// \brief Provides functionalty to activate / deactivate the object in two steps.
	///
	////////////////////////////////////////////////////////////
	class Activateable :
		public ReferenceType
	{
		/// Constructors, destructors
	protected:
		////////////////////////////////////////////////////////////
		/// \brief The constructor (default constructor).
		///
		////////////////////////////////////////////////////////////
		Activateable();

	public:
		////////////////////////////////////////////////////////////
		/// \brief The destructor.
		///
		////////////////////////////////////////////////////////////
		virtual ~Activateable() IsDefault__;

		/// Properties
	public:
		////////////////////////////////////////////////////////////
		/// \brief Gets a value indicating whether the object is activated or not.
		///
		/// \return A value indicating whether the object is activated or not.
		///
		////////////////////////////////////////////////////////////
		bool GetIsActivated() const;

		/// Methods
	public:
		////////////////////////////////////////////////////////////
		/// \brief Avtivates the object (first step).
		///
		/// \override Always call base class method.
		///
		////////////////////////////////////////////////////////////
		virtual void Activate1();

		////////////////////////////////////////////////////////////
		/// \brief Avtivates the object (second step).
		///
		/// \override Always call base class method.
		///
		////////////////////////////////////////////////////////////
		virtual void Activate2();

		////////////////////////////////////////////////////////////
		/// \brief Deactivates the object (first step).
		///
		/// \override Always call base class method.
		///
		////////////////////////////////////////////////////////////
		virtual void Deactivate1();

		////////////////////////////////////////////////////////////
		/// \brief Deactivates the object (second step).
		///
		/// \override Always call base class method.
		///
		////////////////////////////////////////////////////////////
		virtual void Deactivate2();

		/// Members
	private:
		bool																m_isActivated; ///< Indicates whether the object is activated or not.
	};
}
